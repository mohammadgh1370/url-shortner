// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/base_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBaseRepo is a mock of IBaseRepo interface.
type MockIBaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBaseRepoMockRecorder
}

// MockIBaseRepoMockRecorder is the mock recorder for MockIBaseRepo.
type MockIBaseRepoMockRecorder struct {
	mock *MockIBaseRepo
}

// NewMockIBaseRepo creates a new mock instance.
func NewMockIBaseRepo(ctrl *gomock.Controller) *MockIBaseRepo {
	mock := &MockIBaseRepo{ctrl: ctrl}
	mock.recorder = &MockIBaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBaseRepo) EXPECT() *MockIBaseRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIBaseRepo) Count(model, condition interface{}, count *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", model, condition, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIBaseRepoMockRecorder) Count(model, condition, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIBaseRepo)(nil).Count), model, condition, count)
}

// Create mocks base method.
func (m *MockIBaseRepo) Create(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBaseRepoMockRecorder) Create(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBaseRepo)(nil).Create), model)
}

// Delete mocks base method.
func (m *MockIBaseRepo) Delete(model, condition interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", model, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBaseRepoMockRecorder) Delete(model, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBaseRepo)(nil).Delete), model, condition)
}

// Find mocks base method.
func (m *MockIBaseRepo) Find(model, condition interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", model, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockIBaseRepoMockRecorder) Find(model, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIBaseRepo)(nil).Find), model, condition)
}

// First mocks base method.
func (m *MockIBaseRepo) First(model, condition interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", model, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockIBaseRepoMockRecorder) First(model, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockIBaseRepo)(nil).First), model, condition)
}

// FirstOrCreate mocks base method.
func (m *MockIBaseRepo) FirstOrCreate(model, condition interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreate", model, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockIBaseRepoMockRecorder) FirstOrCreate(model, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockIBaseRepo)(nil).FirstOrCreate), model, condition)
}

// UpdateOrCreate mocks base method.
func (m *MockIBaseRepo) UpdateOrCreate(model, condition interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreate", model, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreate indicates an expected call of UpdateOrCreate.
func (mr *MockIBaseRepoMockRecorder) UpdateOrCreate(model, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreate", reflect.TypeOf((*MockIBaseRepo)(nil).UpdateOrCreate), model, condition)
}
